<Configuration>
  <SettingsComponent>
    <string>
      <setting name="ExportTemplatesDialog.FileName"></setting>
      <setting name="JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateClassFromNewFixBase.DefaultInterfacePrefix">I</setting>
      <setting name="JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InvokeEventFix.Format">Invoke{0}</setting>
      <setting name="JiraProxyHost">
      </setting>
      <setting name="KeyboardScheme">VS</setting>
    </string>
    <integer>
      <setting name="bracketMatchHighlightingPosition">1</setting>
      <setting name="bracketMatchHighlightingStyle">0</setting>
      <setting name="JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateSwitchLabelsFix.MAGIC_CONST">65535</setting>
      <setting name="jetbrains.resharper.livetemplates.editor.splitterposition">986</setting>
      <setting name="JetBrains.ReSharper.Refactorings.SafeDelete.SafeDeleteConflictSearcher.ReferenceConflictsLimit">5</setting>
      <setting name="JiraProxyPort">0</setting>
      <setting name="livetemplates.defaultgrouping">3</setting>
      <setting name="RefactoringWizardFormLocationX">354</setting>
      <setting name="RefactoringWizardFormLocationY">-382</setting>
      <setting name="SMART_BRACE_INSERT">1</setting>
      <setting name="UserInputDeferTime">300</setting>
    </integer>
    <boolean>
      <setting name="AlwaysShowDialogAboutException-v2">False</setting>
      <setting name="CodeViewManager.AutoExpandResults">False</setting>
      <setting name="CreateVariableFixBase">False</setting>
      <setting name="FixMouseWheel">True</setting>
      <setting name="FORMAT_BLOCK_ON_RBRACE">True</setting>
      <setting name="FORMAT_STATEMENT_ON_SEMICOLON">True</setting>
      <setting name="HideVsMenuItems">True</setting>
      <setting name="InlineMethodWorkflowRemoveInitialDeclaration">True</setting>
      <setting name="InlineMethodWorkflowReplaceAllUsages">True</setting>
      <setting name="JetBrains.ReSharper.Refactorings.Rename.RenameFile">True</setting>
      <setting name="JetBrains.ReSharper.Refactorings.Rename.SearchInStrings">False</setting>
      <setting name="jetbrains.resharper.treeview.filter">True</setting>
      <setting name="JiraIsAnonymous">False</setting>
      <setting name="JiraProxyAuthentication">False</setting>
      <setting name="JiraUseDefaultProxy">True</setting>
      <setting name="NavigateByControlClick">True</setting>
      <setting name="PopupListCyclicScroll">True</setting>
      <setting name="showMemoryUsage">False</setting>
      <setting name="skipResultsForSingleHierarchyItem">True</setting>
      <setting name="skipResultsForSingleUsage">True</setting>
      <setting name="SMART_INDENT_ON_ENTER_NEW">False</setting>
      <setting name="SMART_PARENTH_INSERT">True</setting>
      <setting name="SolutionAnalysisIndicator.RoundProgress">True</setting>
      <setting name="SolutionAnalysisIndicator.ShowErorsCount">True</setting>
      <setting name="SubmitActivityLogs">False</setting>
      <setting name="SynchronizeOnFrameActivation">True</setting>
      <setting name="USE_VS_ICONS">True</setting>
      <setting name="UseCamelHumps">False</setting>
      <setting name="UseVarForIntroduceVariableRefactoring">True</setting>
      <setting name="UseVarForIntroduceVariableRefactoringEvident">True</setting>
    </boolean>
  </SettingsComponent>
  <HighlightingSettings>
    <IdentifierHighlightingEnabled>True</IdentifierHighlightingEnabled>
    <SeverityTable>
      <SuggestUseVarKeywordEvident>HINT</SuggestUseVarKeywordEvident>
      <RedundantThisQualifier>HINT</RedundantThisQualifier>
      <InconsistentNaming>DO_NOT_SHOW</InconsistentNaming>
      <RedundantNameQualifier>HINT</RedundantNameQualifier>
      <SuggestBaseTypeForParameter>HINT</SuggestBaseTypeForParameter>
    </SeverityTable>
  </HighlightingSettings>
  <CodeCleanup SilentCleanup="Reformat (Quick)" RecentlyUsed="All without Headers">
    <Profile name="Reformat (Quick)">
      <CSArrangeThisQualifier>True</CSArrangeThisQualifier>
      <CSRemoveCodeRedundancies>True</CSRemoveCodeRedundancies>
      <CSUseAutoProperty>False</CSUseAutoProperty>
      <CSMakeFieldReadonly>True</CSMakeFieldReadonly>
      <CSUseVar>
        <BehavourStyle>CAN_CHANGE_TO_IMPLICIT</BehavourStyle>
        <LocalVariableStyle>ALWAYS_EXPLICIT</LocalVariableStyle>
        <ForeachVariableStyle>ALWAYS_EXPLICIT</ForeachVariableStyle>
      </CSUseVar>
      <CSUpdateFileHeader>False</CSUpdateFileHeader>
      <VBOptimizeImports>True</VBOptimizeImports>
      <VBShortenReferences>True</VBShortenReferences>
      <CSOptimizeUsings>
        <OptimizeUsings>True</OptimizeUsings>
        <EmbraceInRegion>False</EmbraceInRegion>
        <RegionName>
        </RegionName>
      </CSOptimizeUsings>
      <CSShortenReferences>True</CSShortenReferences>
      <VBReformatCode>True</VBReformatCode>
      <CSReformatCode>True</CSReformatCode>
      <CSReorderTypeMembers>True</CSReorderTypeMembers>
    </Profile>
    <Profile name="All without Headers">
      <CSArrangeThisQualifier>True</CSArrangeThisQualifier>
      <CSRemoveCodeRedundancies>True</CSRemoveCodeRedundancies>
      <CSUseAutoProperty>True</CSUseAutoProperty>
      <CSMakeFieldReadonly>True</CSMakeFieldReadonly>
      <CSUseVar>
        <BehavourStyle>CAN_CHANGE_TO_EXPLICIT</BehavourStyle>
        <LocalVariableStyle>ALWAYS_EXPLICIT</LocalVariableStyle>
        <ForeachVariableStyle>ALWAYS_EXPLICIT</ForeachVariableStyle>
      </CSUseVar>
      <CSUpdateFileHeader>False</CSUpdateFileHeader>
      <VBOptimizeImports>True</VBOptimizeImports>
      <VBShortenReferences>True</VBShortenReferences>
      <CSOptimizeUsings>
        <OptimizeUsings>True</OptimizeUsings>
        <EmbraceInRegion>False</EmbraceInRegion>
        <RegionName>
        </RegionName>
      </CSOptimizeUsings>
      <CSShortenReferences>True</CSShortenReferences>
      <VBReformatCode>True</VBReformatCode>
      <CSReformatCode>True</CSReformatCode>
      <CSReorderTypeMembers>True</CSReorderTypeMembers>
    </Profile>
  </CodeCleanup>
  <LiveTemplatesManager>
    <UserTemplates>
      <Template uid="d8b998c9-9fec-490b-9d53-020e6dec654a" shortcut="ae" description="MbUnit Assert.AreEqual" text="Assert.AreEqual($EXPECTED$,$ACTUAL$);$END$" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="EXPECTED" expression="" initialRange="0" />
          <Variable name="ACTUAL" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="3691bb2d-6cc0-4411-a498-06bbeb1e5f67" shortcut="af" description="MbUnit Assert.IsFalse" text="Assert.IsFalse($CONDITION$);$END$" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="CONDITION" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="6e5b154e-650a-4f8b-8d32-ec2cfc709909" shortcut="ai" description="MbUnit Assert.IsInstanceOfType" text="Assert.IsInstanceOfType(typeof($expected$),$actual$);$END$" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="expected" expression="guessExpectedType()" initialRange="0" />
          <Variable name="actual" expression="guessExpectedType()" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="3e147156-d560-4017-9eab-ae8b7b05d5ad" shortcut="amock" description="A Mock from the auto mocking container" text="Mock&lt;$ItemTypeToRetrieveFromTheContainer$&gt;()" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="ItemTypeToRetrieveFromTheContainer" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="c4c7d950-b6a6-4a46-b83b-718903a71c31" shortcut="an" description="MbUnit Assert.IsNull" text="Assert.IsNull($object$);$END$" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="object" expression="guessExpectedType()" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="6935edd8-b498-41d7-a494-a56e4c685197" shortcut="ann" description="MbUnit Assert.IsNotNull" text="Assert.IsNotNull($OBJECT$);$END$" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="OBJECT" expression="guessExpectedType()" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="1dafd4ea-b2a6-479e-a4b3-323f9d3db78c" shortcut="arecord" description="Rhino Record With Auto Mocking Container" text="using (Mocks.Record())&#xD;&#xA;{&#xD;&#xA; $END$                &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;using (Mocks.Playback())&#xD;&#xA;{&#xD;&#xA;                &#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="3b024e3b-ac38-49ea-9e0a-11ad3839373f" shortcut="as" description="MbUnit Assert.AreSame" text="Assert.AreSame($EXPECTED$,$ACTUAL$);$END$" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="EXPECTED" expression="" initialRange="0" />
          <Variable name="ACTUAL" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="2d681748-f392-4f5d-8831-cb6768eb4a33" shortcut="at" description="MbUnit Assert.IsTrue" text="Assert.IsTrue($condition$);$END$" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="condition" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="686e7658-dc23-40d6-8559-c150f28f50d6" shortcut="dest" description="Destructor" text="~$NAME$()&#xD;&#xA;{&#xD;&#xA;  Dispose(false);&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="NAME" expression="getFileNameWithoutExtension()" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="8ebd97d1-1d44-469c-a81d-4fceba30a4ce" shortcut="ea" description="MbUnit Explicit Attribute" text="[Explicit]$END$" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="df7de06c-1df7-442a-9293-b65dd6ebb765" shortcut="ec" description="Expect.Call" text="Expect.Call($ObjectMethod$)$END$" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="ObjectMethod" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="4c9fd940-f623-450b-8457-9c4317c14e75" shortcut="eea" description="MbUnit ExpectedException Attribute" text="[ExpectedException(typeof($exceptionType$))]$END$" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="exceptionType" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="3ddb528f-40b3-4d0e-af29-2c0091ab983c" shortcut="fsu" description="Test Fixture Setup" text="[TestFixtureSetUp]&#xD;&#xA;public void FixtureSetUp()&#xD;&#xA;{&#xD;&#xA;   $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="48b8dbee-c42c-4e4c-a7f1-4981b44da3f6" shortcut="ftd" description="Test Fixture Tear Down" text="[TestFixtureTearDown]&#xD;&#xA;public void FixtureTearDown()&#xD;&#xA;{&#xD;&#xA;   $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="2484ace1-eb0e-40a2-bc19-e21790a8d729" shortcut="ia" description="IgnoreArguments" text="LastCall.IgnoreArguments();" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="875ce880-3665-461b-8b97-b6bb2abec83e" shortcut="ig" description="MbUnit Ignore Attribute" text="[Ignore(&quot;$reason$&quot;)]$END$" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="reason" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="3330d417-09a4-422b-a750-3c467ac6f0b0" shortcut="md" description="Mock Dependency" text="private $DependencyInterface$ mock$Name$&#xD;&#xA;{&#xD;&#xA;  get { return Mock&lt;$DependencyInterface$&gt;();}&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="DependencyInterface" expression="" initialRange="0" />
          <Variable name="Name" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="7c4e60bd-d207-41b1-930e-5c4c0d0c46ed" shortcut="mock" description="Mock Instance" text="mockery.DynamicMock&lt;$TYPE$&gt;()" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="TYPE" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="c1c92a26-c34a-4e42-b2fc-d1cf32036a9d" shortcut="mockery" description="create a mockrepository" text="MockRepository mockery = new MockRepository();" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="65780f88-cd4f-4883-8786-e4ff3bb6813f" shortcut="nie" description="Throw New NotImplementedException" text="throw new NotImplementedException();" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="0852cb3b-a58a-4854-84ce-43350275919a" shortcut="nmock" description="NMock Mock Object" text="nmockery.NewMock&lt;$TYPE$&gt;()" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="TYPE" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="048173ae-b526-46ac-bb0c-1818a9e681f9" shortcut="p" description="public" text="public" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="b6926f8d-953e-4b79-a3bb-6dec8b42cafe" shortcut="ps" description="public string" text="public string $VARIABLE_NAME$;$END$" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="VARIABLE_NAME" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="9c871800-0367-4968-b56b-d1e996100faf" shortcut="pucs" description="public string" text="public string $NAME$;" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="NAME" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="2d480da0-1c82-4ccd-a86b-b064787dd0d8" shortcut="pv" description="public void" text="public void $METHOD_NAME$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="METHOD_NAME" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="93e10284-1010-4a67-80fa-e89e8a80b992" shortcut="ra" description="ReplayAll" text="mockery.ReplayAll();" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="91aceed4-7f02-444a-a2aa-cb45ea7b810b" shortcut="record" description="Rhino Record Replay" text="using (mockery.Record())&#xD;&#xA;{&#xD;&#xA; $END$                &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;using (mockery.Playback())&#xD;&#xA;{&#xD;&#xA;                &#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="f580d2ae-ff25-49ff-b5e8-6c2f5fe5ee99" shortcut="sac" description="MbUnit StringAssert.Contains" text="StringAssert.Contains($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="expected" expression="guessExpectedType()" initialRange="0" />
          <Variable name="actual" expression="guessExpectedType()" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="4f6dcc61-511a-4346-91c6-c0bf7a5cb097" shortcut="sr" description="SetupResult" text="SetupResult.For($methodToInvoke$).Return($result$)" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="methodToInvoke" expression="" initialRange="0" />
          <Variable name="result" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="908b39da-7edc-4fe0-8e5b-80910f94aaeb" shortcut="su" description="SetUp" text="[SetUp]&#xD;&#xA;public void SetUp()&#xD;&#xA;{&#xD;&#xA;   $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="b9b31442-aefa-4164-a59e-7850e12c88c9" shortcut="sua" description="MbUnit Setup Attribute" text="[SetUp]" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="477daf14-2d5a-49b5-a4ed-7d59209e3791" shortcut="sut" description="Create System Under Test" text="private $INTERFACETYPE$ CreateSUT()&#xD;&#xA;{&#xD;&#xA;	 return new $INTERFACEIMPLEMENTATION$($ARGS$);&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="INTERFACETYPE" expression="" initialRange="0" />
          <Variable name="INTERFACEIMPLEMENTATION" expression="" initialRange="0" />
          <Variable name="ARGS" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="9d392409-f931-4d71-95a5-934ce17ed344" shortcut="ta" description="MbUnit Test Attribute" text="[Test]" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="321ceb80-808b-4078-924f-30a79652ab5d" shortcut="td" description="TearDown" text="[TearDown]&#xD;&#xA;public void TearDown()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="f77a7378-f20d-44f0-9a35-8b27ba13bde6" shortcut="tda" description="MbUnit TearDown Attribute" text="[TearDown]" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="1d8c5774-a5ae-4c94-9206-8a3a40fd70f4" shortcut="tf" description="TestFixture" text="[TestFixture]" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="9c7595e1-eec3-4527-8cff-7d9e0222d0f0" shortcut="tfsa" description="MbUnit TestFixtureSetup Attribute" text="[TestFixtureSetUp]" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="5260b4d2-bea2-4e9a-b07e-4d073209a314" shortcut="tftda" description="MbUnit TestFixtureTearDown Attribute" text="[TestFixtureTearDown]" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="d33f98c8-55c8-4052-9560-dfa35629b95c" shortcut="unuf" description="Import MbUnit Framework" text="using MbUnit.Framework;$END$" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="90dea78f-7524-466a-b3ea-34d81b8d31fc" shortcut="v" description="private" text="private $TYPE$ $NAME$;$END$" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="TYPE" expression="" initialRange="0" />
          <Variable name="NAME" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="4a58bdbc-1853-42de-8824-35bd11354874" shortcut="vs" description="private string" text="private string $VARIABLE_NAME$;$END$" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="VARIABLE_NAME" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="3b5dee4a-9178-4735-ad2a-1747d6a37829" shortcut="tc" description="Create Test Case" text="[Test]&#xD;&#xA;public void $TEST_NAME$()&#xD;&#xA;{&#xD;&#xA;	throw new System.NotImplementedException();&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="TEST_NAME" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="9bcf4d9f-11e0-4d50-acd6-44f5bb043a9f" shortcut="cslapr" description="Defines a Csla-style readonly Property with a backing field." text="public $PropertyType$ $PropertyName$&#xD;&#xA;{&#xD;&#xA;  [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]&#xD;&#xA;  get&#xD;&#xA;  {&#xD;&#xA;    CanReadProperty(true);&#xD;&#xA;    return this.$PrivateVariable$;&#xD;&#xA;  }&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="2.0" />
        </Context>
        <Categories>
          <Category name="CSLA" />
        </Categories>
        <Variables>
          <Variable name="PropertyType" expression="" initialRange="0" />
          <Variable name="PropertyName" expression="" initialRange="0" />
          <Variable name="PrivateVariable" expression="decapitalize(PropertyName)" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="5d4f752f-9844-4b1f-923d-72c5cd36ea17" shortcut="cslap" description="Defines a Csla-style Property with a backing field." text="public $PropertyType$ $PropertyName$&#xD;&#xA;{&#xD;&#xA;  [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]&#xD;&#xA;  get&#xD;&#xA;  {&#xD;&#xA;    CanReadProperty(true) ;&#xD;&#xA;    return this.$PrivateVariable$;&#xD;&#xA;  }&#xD;&#xA;  [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]&#xD;&#xA;  set&#xD;&#xA;  {&#xD;&#xA;    CanWriteProperty(true);&#xD;&#xA;    if (!this.$PrivateVariable$.Equals(value))&#xD;&#xA;    {&#xD;&#xA;      this.$PrivateVariable$ = value;&#xD;&#xA;      PropertyHasChanged();&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="2.0" />
        </Context>
        <Categories>
          <Category name="CSLA" />
        </Categories>
        <Variables>
          <Variable name="PropertyType" expression="" initialRange="0" />
          <Variable name="PropertyName" expression="" initialRange="0" />
          <Variable name="PrivateVariable" expression="decapitalize(PropertyName)" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="d0f96ad7-baba-4b73-8279-b6eda9350b5a" shortcut="cslabiz" description="Insert CSLA .NET business regions." text="#region Business Methods&#xD;&#xA;&#xD;&#xA;  // TODO: add public properties and methods&#xD;&#xA;&#xD;&#xA;  protected override object GetIdValue()&#xD;&#xA;  {&#xD;&#xA;    // TODO: return unique id value for object&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;#endregion&#xD;&#xA;&#xD;&#xA;#region Validation Rules&#xD;&#xA;&#xD;&#xA;  protected override void AddBusinessRules()&#xD;&#xA;  {&#xD;&#xA;    // TODO: add validation rules&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;#endregion&#xD;&#xA;&#xD;&#xA;#region Authorization Rules&#xD;&#xA;&#xD;&#xA;  protected override void AddAuthorizationRules()&#xD;&#xA;  {&#xD;&#xA;    // TODO: add authorization rules&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;#endregion" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="2.0" />
        </Context>
        <Categories>
          <Category name="CSLA" />
        </Categories>
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="b069ed8e-cdfd-4c80-a0ed-72d9e2893ad4" shortcut="cslasp" description="Defines a Csla-style Property with a backing field." text="public string $PropertyName$&#xD;&#xA;{&#xD;&#xA;  [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]&#xD;&#xA;  get&#xD;&#xA;  {&#xD;&#xA;    CanReadProperty(true) ;&#xD;&#xA;    return this.$PrivateVariable$;&#xD;&#xA;  }&#xD;&#xA;  [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]&#xD;&#xA;  set&#xD;&#xA;  {&#xD;&#xA;    CanWriteProperty(true);&#xD;&#xA;    if (value == null) value = string.Empty;&#xD;&#xA;    if (this.$PrivateVariable$ != value)&#xD;&#xA;    {&#xD;&#xA;      this.$PrivateVariable$ = value;&#xD;&#xA;      PropertyHasChanged();&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="2.0" />
        </Context>
        <Categories>
          <Category name="CSLA" />
        </Categories>
        <Variables>
          <Variable name="PropertyName" expression="" initialRange="0" />
          <Variable name="PrivateVariable" expression="decapitalize(PropertyName)" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="d0febe5e-fe45-4283-811c-24762cbb2165" shortcut="cslasd" description="Defines a Csla-style Property with a SmartDate backing field." text="public string $PropertyName$&#xD;&#xA;{&#xD;&#xA;  [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]&#xD;&#xA;  get&#xD;&#xA;  {&#xD;&#xA;    CanReadProperty(true) ;&#xD;&#xA;    return this.$PrivateVariable$.Text;&#xD;&#xA;  }&#xD;&#xA;  [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]&#xD;&#xA;  set&#xD;&#xA;  {&#xD;&#xA;    CanWriteProperty(true);&#xD;&#xA;    if (value == null) value = string.Empty;&#xD;&#xA;    if (this.$PrivateVariable$ != value)&#xD;&#xA;    {&#xD;&#xA;      this.$PrivateVariable$.Text = value;&#xD;&#xA;      PropertyHasChanged();&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="2.0" />
        </Context>
        <Categories>
          <Category name="CSLA" />
        </Categories>
        <Variables>
          <Variable name="PropertyName" expression="" initialRange="0" />
          <Variable name="PrivateVariable" expression="decapitalize(PropertyName)" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="9e6237d8-c924-4b86-a941-980c34418172" shortcut="cslada" description="Insert CSLA .NET data access region." text="#region Data Access&#xD;&#xA;&#xD;&#xA;[Serializable()]&#xD;&#xA;private class Criteria&#xD;&#xA;{&#xD;&#xA;  private readonly $IdType$ id;&#xD;&#xA;  public $IdType$ Id&#xD;&#xA;  {&#xD;&#xA;    get&#xD;&#xA;    { return this.id; }&#xD;&#xA;  }&#xD;&#xA;  public Criteria($IdType$ id)&#xD;&#xA;  { this.id = id; }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;protected override void DataPortal_Create()&#xD;&#xA;{&#xD;&#xA;  // TODO: load default values into object&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;private void DataPortal_Fetch(Criteria criteria)&#xD;&#xA;{&#xD;&#xA;  // TODO: load values into object&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;protected override void DataPortal_Insert()&#xD;&#xA;{&#xD;&#xA;  // TODO: insert object's data&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;protected override void DataPortal_Update()&#xD;&#xA;{&#xD;&#xA;  // TODO: update object's data&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;protected override void DataPortal_DeleteSelf()&#xD;&#xA;{&#xD;&#xA;  DataPortal_Delete(new Criteria(this.Id));&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;private void DataPortal_Delete(Criteria criteria)&#xD;&#xA;{&#xD;&#xA;  // TODO: delete object's data&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#endregion" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="2.0" />
        </Context>
        <Categories>
          <Category name="CSLA" />
        </Categories>
        <Variables>
          <Variable name="IdType" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="f6ebac71-5020-461d-831f-63cdb0bfca68" shortcut="cslacrit" description="Add a nested criteria class to a CSLA .NET business class." text="private class $ClassName$&#xD;&#xA;{&#xD;&#xA;  private readonly $IdType$ $IdField$;&#xD;&#xA;  &#xD;&#xA;  public $IdType$ $IdProperty$&#xD;&#xA;  {&#xD;&#xA;    get { return this.$IdField$; }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  public $ClassName$($IdType$ $IdParam$)&#xD;&#xA;  {&#xD;&#xA;    this.$IdField$ = $IdParam$;&#xD;&#xA;  }&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="2.0" />
        </Context>
        <Categories>
          <Category name="CSLA" />
        </Categories>
        <Variables>
          <Variable name="ClassName" expression="" initialRange="0" />
          <Variable name="IdType" expression="" initialRange="0" />
          <Variable name="IdField" expression="decapitalize(IdProperty)" initialRange="0" />
          <Variable name="IdProperty" expression="" initialRange="0" />
          <Variable name="IdParam" expression="decapitalize(IdProperty)" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
    </UserTemplates>
    <PredefinedChanges>
      <Changed />
    </PredefinedChanges>
    <FileTemplates />
    <DisabledTemplates>
      <TemplateReference uid="477daf14-2d5a-49b5-a4ed-7d59209e3791" name="sut" />
    </DisabledTemplates>
  </LiveTemplatesManager>
  <SurroundManager>
    <QuickLists>
      <QuickList name="Other Files">
        <Removed />
      </QuickList>
      <QuickList name="C# files">
        <TemplateReference uid="d00002ec-552b-43a7-855a-4d9056bc5e44" name="if" />
        <TemplateReference uid="0d6efb3f-0a28-49ac-a840-a5c18a10820c" name="while" />
        <TemplateReference uid="38772f22-c779-4535-87ae-f2cbfc28d8bb" name="for" />
        <TemplateReference uid="3e5873f5-71b2-4323-a98d-c864e3553e95" name="do..while" />
        <TemplateReference uid="539867cb-c2bb-4a76-9be4-43499424a817" name="#region" />
        <TemplateReference uid="bf9aa46f-cf30-446c-80d3-943eade77764" name="#if..#endif" />
        <TemplateReference uid="5525b896-5c99-477c-aa55-871b4e64d487" name="{}" />
        <TemplateReference uid="2c7fbadc-e259-40d3-9346-89277c463fdc" name="try..catch" />
        <TemplateReference uid="03562c81-32c2-43e8-95f2-ccae5fce50fc" name="try..finally" />
        <TemplateReference uid="2cdb716b-61fd-4a31-b148-2052fa256b96" name="cast" />
        <TemplateReference uid="d1a7844c-e289-438a-aa26-31bbe4694112" name="tag" />
        <TemplateReference uid="bfed504b-c6a2-492a-8098-6067ce44f7ca" name="lock" />
        <TemplateReference uid="c44a28a4-c56c-4ff4-b8db-9b563ae61b01" name="using" />
        <TemplateReference uid="511d131f-49a8-47ae-8200-fb5c7b489692" name="String.Format" />
        <TemplateReference uid="ef8d68a4-15db-4ee1-b28d-9ffc886de8ce" name="foreach" />
        <Removed />
      </QuickList>
      <QuickList name="Visual Basic files">
        <TemplateReference uid="6a01b8ff-4981-4873-9bc3-bf8e1c434865" name="If" />
        <TemplateReference uid="389a11c8-54d3-4e96-9b10-0d6736b93044" name="If..Else" />
        <TemplateReference uid="8c6134b0-b6f4-48a3-a5bc-3878f9a96f04" name="SyncLock" />
        <TemplateReference uid="ab9b078f-4a86-45d8-b5fb-e27910cbb720" name="Using" />
        <TemplateReference uid="9ee3a98e-24ed-4993-98ae-ac77c05bc93f" name="CType" />
        <TemplateReference uid="c4d6ceb3-d45f-4d8e-838d-d1e64a1f671b" name="DirectCast" />
        <TemplateReference uid="c5765f81-208e-4342-9e83-460d2906a8f5" name="TryCast" />
        <Removed />
      </QuickList>
      <QuickList name="XML files">
        <TemplateReference uid="c44a28a4-c56c-4ff4-b8db-9b563ae61b01" name="using" />
        <Removed />
      </QuickList>
      <QuickList name="ASP.NET files">
        <TemplateReference uid="db3304b5-a0fe-433f-a745-2407f990073e" name="" />
        <TemplateReference uid="02e32ab5-abf1-4580-8c6c-a122642f941e" name="" />
        <TemplateReference uid="68c3e345-0a7d-41cf-93ec-de9b0334be7e" name="" />
        <Removed />
      </QuickList>
      <QuickList name="Other files">
        <Removed />
      </QuickList>
    </QuickLists>
    <UserTemplates>
      <Template uid="2ff0e7f5-36ee-419e-bd68-232e56741db0" shortcut="" description="hyperlink" text="&lt;a href=&quot;$END$&quot;&gt;$SELECTION$&lt;/a&gt;" reformat="True" shortenQualifiedReferences="True">
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="b8ef995b-0129-4a4d-ad0c-80794abd82f6" shortcut="" description="css comment" text="/* $SELECTION$ */$END$" reformat="True" shortenQualifiedReferences="True">
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="ef8d68a4-15db-4ee1-b28d-9ffc886de8ce" shortcut="" description="foreach" text="foreach(var item in $END$){$SELECTION$}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Statement" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
    </UserTemplates>
    <PredefinedChanges>
      <Changed />
    </PredefinedChanges>
    <FileTemplates />
  </SurroundManager>
  <ContextActions>
    <JetBrains.ReSharper.Intentions.CSharp.ContextActions.InlineAsAnonymousTypeAction>False</JetBrains.ReSharper.Intentions.CSharp.ContextActions.InlineAsAnonymousTypeAction>
  </ContextActions>
  <FileTemplatesManager>
    <QuickLists>
      <QuickList name="Other Projects">
        <Removed />
      </QuickList>
      <QuickList name="C# projects">
        <TemplateReference uid="560aab2c-307f-4c70-a99a-a3ec249e3153" name="Class" />
        <TemplateReference uid="3667aa6f-7d24-4446-89df-536819a6d103" name="Interface" />
        <TemplateReference uid="d03eb89b-79ff-472e-baab-217c25589c77" name="Struct" />
        <TemplateReference uid="30ac107b-32b0-4f0a-95a3-763001e1dbf6" name="Enum" />
        <Removed />
      </QuickList>
      <QuickList name="Visual Basic projects">
        <TemplateReference uid="b1ee1e2c-928e-43dd-97a7-2cd7e208d02e" name="Class" />
        <TemplateReference uid="797a996f-97ef-4788-a0a6-0eb6e4f7e99e" name="Interface" />
        <TemplateReference uid="3a76e258-e766-40f6-a093-00c04f653a65" name="Structure" />
        <TemplateReference uid="7899541c-0e97-4670-8034-04bcc3b1ff03" name="Enum" />
        <Removed />
      </QuickList>
    </QuickLists>
    <UserTemplates>
      <Template uid="6fb04b7a-eb3a-4686-8b4b-3f5fcf5fef73" shortcut="" description="MockTestFixture" text="using MbUnit.Framework;&#xD;&#xA;using Rhino.Mocks;&#xD;&#xA;&#xD;&#xA;namespace $NAMESPACE$&#xD;&#xA;{&#xD;&#xA;    [TestFixture]&#xD;&#xA;    public class $FIXTURE_NAME$&#xD;&#xA;    {&#xD;&#xA;        private MockRepository mockery;&#xD;&#xA;&#xD;&#xA;        [SetUp]&#xD;&#xA;        public void Setup()&#xD;&#xA;        {&#xD;&#xA;            mockery = new MockRepository();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        [Test]&#xD;&#xA;        public void $FIRST_TEST_NAME$()&#xD;&#xA;        {&#xD;&#xA;              $END$&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        &#xD;&#xA;    }&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <ProjectLanguageContext language="CSharp" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="NAMESPACE" expression="fileDefaultNamespace()" initialRange="-1" />
          <Variable name="FIXTURE_NAME" expression="getFileNameWithoutExtension()" initialRange="-1" />
          <Variable name="FIRST_TEST_NAME" expression="" initialRange="0" />
        </Variables>
        <CustomProperties>
          <Property key="FileName" value="File" />
          <Property key="Extension" value="cs" />
          <Property key="ValidateFileName" value="False" />
        </CustomProperties>
      </Template>
      <Template uid="64ff222d-34e6-416f-aaa7-94a653b66b99" shortcut="" description="TestFixture" text="using MbUnit.Framework;&#xD;&#xA;&#xD;&#xA;namespace $NAMESPACE$&#xD;&#xA;{&#xD;&#xA;    [TestFixture]&#xD;&#xA;    public class $FIXTURE_NAME$&#xD;&#xA;    {        &#xD;&#xA;                    &#xD;&#xA;        [Test]&#xD;&#xA;        public void $FIRST_TEST_NAME$()&#xD;&#xA;        {&#xD;&#xA;              $END$&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;    }&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <ProjectLanguageContext language="CSharp" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="NAMESPACE" expression="fileDefaultNamespace()" initialRange="-1" />
          <Variable name="FIXTURE_NAME" expression="getFileNameWithoutExtension()" initialRange="-1" />
          <Variable name="FIRST_TEST_NAME" expression="" initialRange="0" />
        </Variables>
        <CustomProperties>
          <Property key="FileName" value="File" />
          <Property key="Extension" value="cs" />
        </CustomProperties>
      </Template>
      <Template uid="16c60e92-dc3c-426c-aaba-ec89b000b3f9" shortcut="" description="AutoMockTestFixture" text="using MbUnit.Framework;&#xD;&#xA;using Rhino.Mocks;&#xD;&#xA;&#xD;&#xA;namespace $NAMESPACE$&#xD;&#xA;{&#xD;&#xA;    [TestFixture]&#xD;&#xA;    public class $FIXTURE_NAME$   : AutoMockingTest&#xD;&#xA;    {&#xD;&#xA;        public override void Setup()&#xD;&#xA;        {&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        [Test]&#xD;&#xA;        public void $FIRST_TEST_NAME$()&#xD;&#xA;        {&#xD;&#xA;              $END$&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        &#xD;&#xA;    }&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <ProjectLanguageContext language="CSharp" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="NAMESPACE" expression="fileDefaultNamespace()" initialRange="-1" />
          <Variable name="FIXTURE_NAME" expression="getFileNameWithoutExtension()" initialRange="-1" />
          <Variable name="FIRST_TEST_NAME" expression="" initialRange="0" />
        </Variables>
        <CustomProperties>
          <Property key="FileName" value="File" />
          <Property key="Extension" value="cs" />
          <Property key="ValidateFileName" value="False" />
        </CustomProperties>
      </Template>
    </UserTemplates>
    <PredefinedChanges>
      <Changed />
    </PredefinedChanges>
    <FileTemplates />
  </FileTemplatesManager>
  <CodeStyleSettings>
    <CSharp>
      <FormatSettings>
        <ALIGN_MULTILINE_ARGUMENT>False</ALIGN_MULTILINE_ARGUMENT>
        <BLANK_LINES_AROUND_SINGLE_LINE_FIELD>1</BLANK_LINES_AROUND_SINGLE_LINE_FIELD>
        <BLANK_LINES_AROUND_SINGLE_LINE_INVOCABLE>1</BLANK_LINES_AROUND_SINGLE_LINE_INVOCABLE>
        <BLANK_LINES_BETWEEN_USING_GROUPS>1</BLANK_LINES_BETWEEN_USING_GROUPS>
        <FORCE_ATTRIBUTE_STYLE>SEPARATE</FORCE_ATTRIBUTE_STYLE>
        <FORCE_FOR_BRACES_STYLE>ALWAYS_ADD</FORCE_FOR_BRACES_STYLE>
        <FORCE_FOREACH_BRACES_STYLE>ALWAYS_ADD</FORCE_FOREACH_BRACES_STYLE>
        <FORCE_IFELSE_BRACES_STYLE>ALWAYS_ADD</FORCE_IFELSE_BRACES_STYLE>
        <FORCE_WHILE_BRACES_STYLE>ALWAYS_ADD</FORCE_WHILE_BRACES_STYLE>
        <INDENT_ANONYMOUS_METHOD_BLOCK>False</INDENT_ANONYMOUS_METHOD_BLOCK>
        <INDENT_EMBRACED_INITIALIZER_BLOCK>False</INDENT_EMBRACED_INITIALIZER_BLOCK>
        <INDENT_SIZE>4</INDENT_SIZE>
        <KEEP_BLANK_LINES_IN_CODE>1</KEEP_BLANK_LINES_IN_CODE>
        <KEEP_BLANK_LINES_IN_DECLARATIONS>1</KEEP_BLANK_LINES_IN_DECLARATIONS>
        <KEEP_USER_LINEBREAKS>False</KEEP_USER_LINEBREAKS>
        <MODIFIERS_ORDER IsNull="False">
          <Item>public</Item>
          <Item>protected</Item>
          <Item>internal</Item>
          <Item>private</Item>
          <Item>new</Item>
          <Item>abstract</Item>
          <Item>virtual</Item>
          <Item>override</Item>
          <Item>sealed</Item>
          <Item>static</Item>
          <Item>readonly</Item>
          <Item>extern</Item>
          <Item>unsafe</Item>
          <Item>volatile</Item>
        </MODIFIERS_ORDER>
        <PLACE_CONSTRUCTOR_INITIALIZER_ON_SAME_LINE>False</PLACE_CONSTRUCTOR_INITIALIZER_ON_SAME_LINE>
        <PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE>False</PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE>
        <PLACE_SIMPLE_ACCESSOR_ON_SINGLE_LINE>False</PLACE_SIMPLE_ACCESSOR_ON_SINGLE_LINE>
        <PLACE_TYPE_CONSTRAINTS_ON_SAME_LINE>False</PLACE_TYPE_CONSTRAINTS_ON_SAME_LINE>
        <PLACE_WHILE_ON_NEW_LINE>True</PLACE_WHILE_ON_NEW_LINE>
        <REDUNDANT_THIS_QUALIFIER_STYLE>ALWAYS_USE</REDUNDANT_THIS_QUALIFIER_STYLE>
        <SIMPLE_EMBEDDED_STATEMENT_STYLE>ON_SINGLE_LINE</SIMPLE_EMBEDDED_STATEMENT_STYLE>
        <SPACE_AFTER_TYPECAST_PARENTHESES>False</SPACE_AFTER_TYPECAST_PARENTHESES>
        <SPACE_AROUND_MULTIPLICATIVE_OP>True</SPACE_AROUND_MULTIPLICATIVE_OP>
        <SPACE_BEFORE_SIZEOF_PARENTHESES>False</SPACE_BEFORE_SIZEOF_PARENTHESES>
        <SPACE_BEFORE_TYPEOF_PARENTHESES>False</SPACE_BEFORE_TYPEOF_PARENTHESES>
        <SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES>True</SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES>
        <STICK_COMMENT>False</STICK_COMMENT>
        <WRAP_AFTER_DECLARATION_LPAR>True</WRAP_AFTER_DECLARATION_LPAR>
        <WRAP_AFTER_INVOCATION_LPAR>True</WRAP_AFTER_INVOCATION_LPAR>
        <WRAP_ARGUMENTS_STYLE>CHOP_IF_LONG</WRAP_ARGUMENTS_STYLE>
        <WRAP_BEFORE_FIRST_TYPE_PARAMETER_CONSTRAINT>True</WRAP_BEFORE_FIRST_TYPE_PARAMETER_CONSTRAINT>
        <WRAP_EXTENDS_LIST_STYLE>CHOP_IF_LONG</WRAP_EXTENDS_LIST_STYLE>
        <WRAP_PARAMETERS_STYLE>CHOP_IF_LONG</WRAP_PARAMETERS_STYLE>
      </FormatSettings>
      <UsingsSettings>
        <AddImportsToDeepestScope>True</AddImportsToDeepestScope>
      </UsingsSettings>
      <Naming2>
        <ExceptionName IsNull="False">
        </ExceptionName>
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="TypesAndNamespaces" />
        <PredefinedRule Inspect="True" Prefix="I" Suffix="" Style="AaBb" ElementKind="Interfaces" />
        <PredefinedRule Inspect="True" Prefix="T" Suffix="" Style="AaBb" ElementKind="TypeParameters" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="MethodPropertyEvent" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Locals" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="LocalConstants" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Parameters" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PublicFields" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Constants" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="StaticReadonly" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="EnumMember" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Other" />
      </Naming2>
      <CustomMemberReorderingPatterns><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Patterns xmlns="urn:shemas-jetbrains-com:member-reordering-patterns">

    <!-- Do not reorder COM interfaces -->
    <Pattern>
        <Match>
            <And Weight="2000">
                <Kind Is="interface"/>
                <HasAttribute CLRName="System.Runtime.InteropServices.InterfaceTypeAttribute"
                              Inherit="true"/>
            </And>
        </Match>
    </Pattern>

    <!-- Do not reorder P/Invoke structs -->
    <Pattern>
        <Match>
            <And Weight="2000">
                <Or>
                    <Kind Is="struct"/>
                    <Kind Is="class"/>
                </Or>
                <HasAttribute CLRName="System.Runtime.InteropServices.StructLayoutAttribute"
                              Inherit="true"/>
            </And>
        </Match>
    </Pattern>

    <!-- Do not reorder P/Invoke classes (called xxxNativeMethods) -->
    <Pattern>
        <Match>
            <And Weight="2000">
                <Kind Is="class"/>
                <Name Is=".*NativeMethods" />
            </And>
        </Match>
    </Pattern>

    <!-- StyleCop pattern -->
    <Pattern RemoveAllRegions="true">
        <Match>
            <Or Weight="1000" >
                <Kind Is="class" />
                <Kind Is="struct" />
                <Kind Is="interface"/>
            </Or>
        </Match>

        <!-- constants and fields -->
        <Entry>
            <Match>
                <Or>
                    <Kind Is="constant"/>
                    <Kind Is="field"/>
                </Or>
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private"/>
                <Kind Order="constant field"/>
                <Readonly/>
                <Static/>
                <Name/>
            </Sort>
            <Group Region="Constants and Fields"/>
        </Entry>

        <!-- constructors -->
        <Entry>
            <Match>
                <Or Weight="200">
                    <Kind Is="constructor"/>
                    <Kind Is="destructor"/>
                </Or>
            </Match>
            <Sort>
                <Static/>
                <Kind Order="constructor destructor"/>
                <Access Order="public internal protected-internal protected private"/>
            </Sort>
            <Group Region="Constructors and Destructors"/>
        </Entry>

        <!-- delegates -->
        <Entry>
            <Match>
                <Kind Is="delegate"/>
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private" />
                <Static />
                <Name/>
            </Sort>
            <Group Region="Delegates"/>
        </Entry>

        <!-- events -->
        <Entry>
            <Match>
                <Kind Is="event"/>
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private" />
                <Static />
                <Name/>
            </Sort>
            <Group Region="Events"/>
        </Entry>

        <!-- enum -->
        <Entry>
            <Match>
                <Kind Is="enum"/>
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private" />
                <Name/>
            </Sort>
            <Group Region="Enums"/>
        </Entry>

        <!-- interfaces -->
        <Entry>
            <Match>
                <Kind Is="interface" />
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private" />
                <Name/>
            </Sort>
            <Group Region="Interfaces"/>
        </Entry>

        <!-- properties -->
        <Entry>
            <Match>
                <Kind Is="property"/>
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private"/>
                <Static/>
                <Name/>
            </Sort>
            <Group Region="Properties"/>
        </Entry>

        <!-- indexers -->
        <Entry>
            <Match>
                <Kind Is="indexer"
                      Weight="300" />
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private" />
                <Static/>
                <Name/>
            </Sort>
            <Group Region="Indexers"/>
        </Entry>

        <!-- operator -->
        <Entry>
            <Match>
                <Kind Is="operator"/>
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private" />
                <Static/>
                <Name/>
            </Sort>
            <Group Region="Operators"/>
        </Entry>

        <!-- public methods -->
        <Entry>
            <Match>
                <And>
                    <Kind Is="method"/>
                    <Access Is="public"/>
                </And>
            </Match>
            <Sort>
                <Access Order="public"/>
                <Static/>
                <Name/>
            </Sort>
            <Group Region="Public Methods"/>
        </Entry>

        <!-- Implemented Interfaces -->
        <Entry>
            <Match>
                <And Weight="500">
                    <Kind Is="method"/>
                    <ImplementsInterface CLRName=".*"/>
                </And>
            </Match>
            <Sort>
                <ImplementsInterface />
                <Access Order="public internal protected-internal protected private"/>
                <Static/>
                <Name/>
            </Sort>
            <Group Region="Implemented Interfaces">
                <ImplementsInterface Region="${ImplementsInterface}" />
            </Group>
        </Entry>

        <!-- other methods -->
        <Entry>
            <Match>
                <Kind Is="method"/>
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private"/>
                <Static/>
                <Name/>
            </Sort>
            <Group Region="Methods"/>
        </Entry>

        <!-- Nested structs -->
        <Entry>
            <Match>
                <Kind Is="struct"
                      Weight="600" />
            </Match>
            <Sort>
                <Static />
                <Access Order="public internal protected-internal protected private" />
                <Name/>
            </Sort>
        </Entry>

        <!-- Nested classes -->
        <Entry>
            <Match>
                <Kind Is="class"
                      Weight="700" />
            </Match>
            <Sort>
                <Static />
                <Access Order="public internal protected-internal protected private" />
                <Name/>
            </Sort>
        </Entry>

        <!-- all other members -->
        <Entry/>

    </Pattern>
</Patterns>
]]></CustomMemberReorderingPatterns>
    </CSharp>
    <VB>
      <FormatSettings>
        <INDENT_SIZE>4</INDENT_SIZE>
      </FormatSettings>
      <ImportsSettings />
      <Naming2 />
    </VB>
    <GenerateMemberBody />
    <Naming2>
      <ExceptionName IsNull="False">
      </ExceptionName>
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="aaBb" ElementKind="Locals" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="aaBb" ElementKind="Parameters" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="AaBb" ElementKind="TypesAndNamespaces" />
      <PredefinedRule Inspect="False" Prefix="I" Suffix="" Style="AaBb" ElementKind="Interfaces" />
      <PredefinedRule Inspect="False" Prefix="T" Suffix="" Style="AaBb" ElementKind="TypeParameters" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="AaBb" ElementKind="MethodPropertyEvent" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="aaBb" ElementKind="LocalConstants" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="AaBb" ElementKind="PublicFields" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="AaBb" ElementKind="Constants" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="AaBb" ElementKind="StaticReadonly" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="AaBb" ElementKind="EnumMember" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="AaBb" ElementKind="Other" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="PrivateInstanceFields" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="PrivateStaticFields" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateConstants" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateStaticReadonly" />
    </Naming2>
  </CodeStyleSettings>
  <TodoManager ActiveGrouping="4">
    <Pattern Name="Todo" Id="961894CCC510410ABE2B99132B253C80" Regexp="(\W|^)(?&lt;TAG&gt;TODO)(\W|$)(.*)" CaseSensitive="False" Color="Blue" Icon="Normal" LookInComments="True" LookInIdentifiers="False" LookInStringLiterals="False" />
    <Pattern Name="Note" Id="961894CCC510410ABE2B99132B253C81" Regexp="(\W|^)(?&lt;TAG&gt;NOTE)(\W|$)(.*)" CaseSensitive="False" Color="ffff8000" Icon="Warning" LookInComments="True" LookInIdentifiers="False" LookInStringLiterals="False" />
    <Pattern Name="Bug" Id="9F4E80481F12431CB36D19D6738780F1" Regexp="(\W|^)(?&lt;TAG&gt;BUG)(\W|$)(.*)" CaseSensitive="False" Color="Red" Icon="Error" LookInComments="True" LookInIdentifiers="False" LookInStringLiterals="False" />
    <Pattern Name="Not Implemented" Id="9F4E80481F12431CB36D19D6738780F2" Regexp="NotImplementedException" CaseSensitive="False" Color="Red" Icon="Edit" LookInComments="False" LookInIdentifiers="True" LookInStringLiterals="False" />
    <Filter Name="Todos" Id="6E3EB9662CFB491EBD2103D8654051DF" Active="False">
      <PatternRef Id="961894CCC510410ABE2B99132B253C80" />
    </Filter>
    <Filter Name="Notes" Id="0069D9FE451E44B181256291430424FC" Active="False">
      <PatternRef Id="961894CCC510410ABE2B99132B253C81" />
    </Filter>
    <Filter Name="Bugs" Id="A674BC0145094E3D8C9C867C0FDAF288" Active="False">
      <PatternRef Id="9F4E80481F12431CB36D19D6738780F1" />
    </Filter>
    <Filter Name="Not Implemented" Id="A674BC0145094E3D8C9C867C0FDAF289" Active="False">
      <PatternRef Id="9F4E80481F12431CB36D19D6738780F2" />
    </Filter>
  </TodoManager>
  <PluginManager>
  </PluginManager>
  <DefaultTextControlSchemeManager>
    <CaretRow>True</CaretRow>
  </DefaultTextControlSchemeManager>
  <StyleCopForReSharper>
    <SpecifiedAssemblyPath IsNull="True" />
  </StyleCopForReSharper>
  <ProductUsageFeedbackSubmitter>
    <myPromptedAboutLogUpload>True</myPromptedAboutLogUpload>
  </ProductUsageFeedbackSubmitter>
  <CodeCompletionController>
    <AutoPopupDelay2>400</AutoPopupDelay2>
  </CodeCompletionController>
  <LookupOptions>
    <ShowSignatures>True</ShowSignatures>
  </LookupOptions>
</Configuration>